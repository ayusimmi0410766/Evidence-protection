# 🚀 STEP 1: Install Required Libraries
!pip install cryptography qrcode[pil] pillow fpdf

# 🚀 STEP 2: Import Required Modules
import hashlib
import time
import json
import os
from datetime import datetime
import qrcode
from cryptography.fernet import Fernet
from google.colab import files
from PIL import Image, ImageDraw
from fpdf import FPDF

# 🚀 STEP 3: Utility Functions
def format_timestamp(ts):
    return datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')

def hash_file(file_path):
    """Returns the SHA256 hash of the file content"""
    with open(file_path, 'rb') as f:
        file_data = f.read()
    return hashlib.sha256(file_data).hexdigest()

def generate_qr(data, filename='qrcode.png'):
    """Generates and saves QR code for given data"""
    img = qrcode.make(data)
    img.save(filename)
    print(f"✅ QR code saved as {filename}")

def encrypt_data(data, key):
    """Encrypts data using the provided key"""
    cipher = Fernet(key)
    return cipher.encrypt(data.encode()).decode()

def decrypt_data(encrypted_data, key):
    """Decrypts the data using the provided key"""
    cipher = Fernet(key)
    return cipher.decrypt(encrypted_data.encode()).decode()

# 🚀 STEP 4: Blockchain Classes
class Evidence:
    def _init_(self, description, file_path, created_by, key):
        """Creates evidence for blockchain"""
        self.timestamp = time.time()
        self.description = description
        self.created_by = created_by
        self.file_path = file_path
        self.file_hash = hash_file(file_path)
        self.encrypted_data = encrypt_data(self.file_hash, key)
        self.hash = self.generate_hash()

    def generate_hash(self):
        """Generates the hash of the evidence"""
        evidence_string = f"{self.timestamp}{self.description}{self.encrypted_data}{self.created_by}"
        return hashlib.sha256(evidence_string.encode()).hexdigest()

class Block:
    def _init_(self, evidence, previous_hash=''):
        """Creates a block for the blockchain"""
        self.timestamp = time.time()
        self.evidence = evidence
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        """Calculates the hash of the block"""
        block_string = f"{self.timestamp}{self.evidence.hash}{self.previous_hash}"
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    def _init_(self):
        """Initializes the blockchain"""
        self.key = Fernet.generate_key()  # Key for encrypting evidence
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        """Creates the first block (genesis block)"""
        dummy_path = "genesis.txt"
        with open(dummy_path, "w") as f:
            f.write("Genesis block data")
        genesis_evidence = Evidence("Genesis Block", dummy_path, "System", self.key)
        os.remove(dummy_path)
        return Block(genesis_evidence, "0")

    def get_latest_block(self):
        """Returns the latest block"""
        return self.chain[-1]

    def add_block(self, new_evidence):
        """Adds a new block to the blockchain"""
        latest_block = self.get_latest_block()
        new_block = Block(new_evidence, latest_block.hash)
        self.chain.append(new_block)
        qr_filename = f"evidence_block_{len(self.chain)-1}.png"
        generate_qr(new_block.hash, qr_filename)

    def is_chain_valid_verbose(self):
        """Checks if the blockchain is valid"""
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i-1]
            if current.hash != current.calculate_hash():
                print(f"⚠ Block {i} hash mismatch!")
                return False
            if current.previous_hash != previous.hash:
                print(f"⚠ Block {i} previous hash mismatch!")
                return False
        return True

    def export_chain(self, filename='evidence_chain.json'):
        """Exports the blockchain data into a JSON file"""
        data = []
        for block in self.chain:
            evidence = block.evidence
            data.append({
                'timestamp': format_timestamp(block.timestamp),
                'description': evidence.description,
                'created_by': evidence.created_by,
                'file_hash_encrypted': evidence.encrypted_data,
                'block_hash': block.hash,
                'previous_hash': block.previous_hash
            })
        with open(filename, 'w') as f:
            json.dump(data, f, indent=4)
        print(f"📁 Blockchain exported to {filename}")

# 🚀 STEP 5: Upload Files and Add to Blockchain
bc = Blockchain()
key = bc.key

# Upload multiple files at once
print("📤 Upload files for evidence (images, text, PDFs, etc.)")
uploaded = files.upload()

# Process each uploaded file
for filename in uploaded.keys():
    print(f"\n➡ File uploaded: {filename}")
    description = input(f"📝 Enter description for '{filename}': ")
    officer = input(f"👮 Enter officer name who submitted it: ")
    evidence = Evidence(description, filename, officer, key)
    bc.add_block(evidence)

# 🚀 STEP 6: Verify & Export Blockchain
print("\n🔍 Validating blockchain...")
valid = bc.is_chain_valid_verbose()
print("✅ Chain is valid!" if valid else "❌ Chain is NOT valid!")

# Export the blockchain to JSON
bc.export_chain()
files.download("evidence_chain.json")

# 🚀 STEP 7: Download All QR Codes
# Download QR codes for each block
for i in range(1, len(bc.chain)):
    qr_name = f"evidence_block_{i}.png"
    if os.path.exists(qr_name):
        files.download(qr_name)
